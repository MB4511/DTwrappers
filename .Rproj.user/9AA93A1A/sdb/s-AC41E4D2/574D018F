{
    "collab_server" : "",
    "contents" : "#' Add backtick\n#'\n#' Function that add backticks to the input variables.\n#'\n#' @param  x  Character value specifying the name of input parameters.\n#' @param  include.backtick specifies whether a backtick should be added. Parameter values should be either 'all' or 'as.needed'\n\nadd.backtick <- function(x, include.backtick = \"as.needed\", dat = NULL){\n  \n  len.x <- length(x)\n  if(include.backtick == \"all\"){\n    w <- 1:len.x\n  }\n  if (include.backtick == \"as.needed\") {\n    if(is.null(dat)){\n      w <- which(x != make.names(names = x))\n    }\n    if(!is.null(dat)){\n      require(data.table)\n      setDT(dat)\n      requires.backtick <- logical(length = len.x)\n      \n      for(i in 1:len.x){\n        value.exists <- is.null(tryCatch(expr = dat[, unique(eval(parse(text = x[i])))], error = function(e) return(NULL)))\n        \n        if(value.exists == TRUE & x[i] %in% names(dat) & x[i] != make.names(x[i])){\n          requires.backtick[i] <- TRUE\n        }\n      }\n      w <- which(requires.backtick == TRUE)\n    }\n    \n  }\n  if (length(w) > 0) {\n    x[w] <- sprintf(\"`%s`\", x[w])\n  }\n  return(x)\n}\n\n\n#' dt.calculate\n#'\n#' @description  This function allows a user to apply one or more functions to all of the specified variables in a data.frame or data.table object.  It is built as a wrapper function of data.table's method of applying functions to variables while allowing for filtering and grouping steps.  This allows a user to easily calculate many results, e.g. the.functions = c(\"mean\", \"median\", \"sd\") on multiple columns, e.g. the.variables = c(\"Age\", \"Income\") while also filtering and grouping the data.  Options also exist to return a data.table coding statement (result = \"code\") for educational purposes or both the result and the code together (result = \"all\").  For examples, please see the vignette.\n#'\n#' @param dt.name a character value specifying the name of a data.frame or data.table object to select data from.  A variable called dat should be referred to with dt.name = \"dat\" when using the function.\n#' @param the.functions  A character vector specifying the name of the functions to apply to the.variables.  Each function included in the.functions will be separately applied to each variable in the.variables.\n#' @param the.variables  A character or numeric vector specifying the variables to perform the calculations on. For character vectors, only values that exist in the names of the data will be used.  For numeric vectors, only the values of unique(floor(sorting.variables)) that are in 1:ncol() of your data will be used.  Then these indices will be used to select column names from the data.  Other values in sorting.variables that do not correspond to a defined column will be excluded from the calculation.  When the.variables includes \".\", then all values in names(dat) will be selected.  Values of the.variables that also exist in grouping.variables will be excluded from the.variables (but grouped by these values).\n#' @param the.filter  a character value, numeric vector, logical vector, or expression stating the logical operations used to filter the data.  The filtering step will be applied prior to generating the counts.  Defaults to NULL unless otherwise specified.  Logical vectors will be converted to a numeric filter, e.g. c(TRUE, TRUE, FALSE) will become 1:2 to signify which rows should be selected.\n#' @param grouping.variables  A character or numeric vector specifying the variables to perform the calculations on. For character vectors, the values may be either column names of the data or calculations based upon them (see the vignette for examples).  For numeric vectors, only the values of unique(floor(grouping.variables)) that are in 1:ncol() of your data will be used.  Then these indices will be mapped to the corresponding column names from the data.  When NULL, no grouping will be performed.\n#' @param sortby.group  A logical value specifying whether the grouping should be sorted (TRUE, the default value) or as is (FALSE).\n#' @param add.function.name  A logical value specifying whether the name of the function applied should be appended to \n#'        the column names in the resulting table.  Only applies if the.functions is of length 1.\n#' @param other.params  A character value specifying any additional parameters needed to call the.functions.  \n#'        For instance, if the.functions = \"mean\", and you would like to remove missing values, then specifying \n#'        other.params = \"na.rm = TRUE\" as a character would suffice.  Multiple parameters can be specified with comma \n#'        separation, e.g. other.params = \"trim = 1, na.rm = TRUE\".  Note that all of the parameters supplied must \n#'        apply to all of the.functions\n#' \n#' @param  ... additional arguments to be passed \n#' \n#' @source DTwrappers::create.dt.statement\n#' @source DTwrappers::eval.dt.statement\n#' @source DTwrappers::add.backtick\n#' @import data.table\n#'\n#'@examples\n\n#' @export\ndt.calculate <-\n  function(dt.name,\n           the.functions,\n           the.variables = \".\",\n           the.filter = NULL,\n           grouping.variables = NULL,\n           sortby.group = TRUE,\n           other.params = \"\",\n           table.format = \"long\",\n           add.function.name = TRUE,\n           individual.variables = TRUE,\n           output.as.table = TRUE,\n           return.as = \"result\",\n           envir = .GlobalEnv,\n           ...) {\n  require(data.table)\n  \n  is.format.dt <- check.dt.status(dt.name = dt.name, envir = envir)\n  \n  outcome.name <- \"Outcome\"\n  variable.name <- \"Variable\"\n  function.name <- \"Function\"\n  command.name <- \"Command\"\n  \n  value.long <- \"long\"\n  dots.with.comma <- \", ...\"\n  if(other.params == \"\" | is.na(other.params) | is.null(other.params)){\n    dots.with.comma <- \"\"\n  }\n  \n  all.variable.names <- names(get(x = dt.name, envir = envir))\n  \n  functions.exist <- sapply(X = the.functions, FUN = \"exists\", envir = envir)\n  \n  the.functions <- names(functions.exist)[functions.exist == TRUE]\n  \n  if (length(the.functions) == 0 | is.null(the.functions) | is.na(the.functions[1])){\n    stop(\"Error:  the.functions must be specified with functions that are loaded.  Make sure to call library() for the required packages.\")\n  }\n  \n  if(is.numeric(x = grouping.variables) == TRUE){\n    grouping.indices <- unique(floor(grouping.variables))\n    grouping.variables <- all.variable.names[grouping.indices]\n  }\n  \n  grouping.variables <- unique(grouping.variables)\n  \n  if (\".\" %in% the.variables){\n    the.variables <- all.variable.names\n  }\n  \n  if(is.numeric(x = the.variables) == TRUE){\n    the.indices <- unique(floor(the.variables))\n    \n    the.variables <- all.variable.names[the.indices[the.indices %in% 1:ncol(x = get(x = dt.name, envir = envir))]]\n  }\n  \n  the.variables <-\n    unique(the.variables[the.variables %in% all.variable.names & !(the.variables %in% grouping.variables)])\n  \n  \n  non.grouping.variables <- all.variable.names[!(all.variable.names %in% grouping.variables)]\n  \n  num.functions <- length(the.functions)\n  num.variables <- length(the.variables)\n\n  series.variables <- paste(sprintf(\"'%s'\", the.variables), collapse = \", \")\n\n  calculate.together <- is.logical(individual.variables) & individual.variables[1] == FALSE\n  \n  if(calculate.together == TRUE){\n    if(num.variables == 1){\n      SD.command = \"\"\n    }\n    \n    if(num.variables > 1){\n      SD.command <- sprintf(\", .SDcols = c(%s)\", paste(sprintf(\"'%s'\", the.variables), collapse = \", \"))\n      \n      if(num.variables == length(non.grouping.variables) & mean(the.variables %in% non.grouping.variables) == 1){\n        SD.command <- \"\"\n      }\n    }\n    \n    j.statement <- sprintf(\".(%s)%s\", paste(sprintf(\"%s = %s(.SD%s)\", add.backtick(the.functions), add.backtick(x = the.functions), dots.with.comma), collapse = \", \"), SD.command)\n    \n    if(num.functions == 1 & ((is.logical(add.function.name) & add.function.name[1] == F) | is.logical(output.as.table) & output.as.table[1] == F)){\n      j.statement <- sprintf(\"%s(.SD%s)\", add.backtick(the.functions), dots.with.comma)\n    }\n    \n  }\n  if(calculate.together == FALSE){\n    if(num.variables == 1){\n      printed.variables <- series.variables\n      SD.command = \"\"\n    }\n    \n    if(num.variables > 1){\n      printed.variables <- sprintf(\"c(%s)\", series.variables)\n      SD.command <- sprintf(\", .SDcols = c(%s)\", paste(sprintf(\"'%s'\", the.variables), collapse = \", \"))\n      \n      if(num.variables == length(non.grouping.variables) & mean(the.variables %in% non.grouping.variables) == 1){\n        SD.command <- \"\"\n      }\n    }\n    \n    \n    if(num.functions == 1 & add.function.name == FALSE){\n      if(num.variables == 1){\n        j.statement <- sprintf(\".(%s = %s(%s%s))\", add.backtick(the.variables), add.backtick(x = the.functions), add.backtick(the.variables), dots.with.comma)\n      }\n      if(num.variables > 1){\n        j.statement <- sprintf(\"lapply(X = .SD, FUN = '%s'%s)%s\", the.functions, dots.with.comma, SD.command)\n      }\n    }\n    \n    if(table.format == value.long){\n      \n      if(num.variables > 1){\n        lapply.statements <- paste(sprintf(\"%s = lapply(X = .SD, FUN = '%s'%s)\", add.backtick(x = the.functions), the.functions, dots.with.comma), collapse = \", \")\n        \n        j.statement <- sprintf(\".(variable = %s, %s)%s\", printed.variables, lapply.statements, SD.command)\n      }\n      \n      if(num.variables == 1){\n        lapply.statements <- paste(sprintf(\"%s = %s(%s%s)\", add.backtick(x = the.functions), add.backtick(the.functions), the.variables, dots.with.comma), collapse = \", \")\n        j.statement <- sprintf(\".(variable = %s, %s)\", printed.variables, lapply.statements)\n      }\n    }\n    if(table.format != value.long){\n      if(num.functions > 1 | add.function.name == TRUE){\n        the.grid <-\n          setDT(expand.grid(the.variables, the.functions, stringsAsFactors = FALSE))\n        setnames(x = the.grid, old = names(the.grid), new = c(variable.name, function.name))\n        \n        if(add.function.name == TRUE){\n          the.grid[, eval(outcome.name) := sprintf(\"%s_%s\", get(variable.name), get(function.name))]\n        }\n        if (add.function.name == FALSE) {\n          the.grid[, eval(outcome.name) := get(variable.name)]\n        }\n        for (i in 1:the.grid[, .N]) {\n          the.grid[, eval(command.name) := sprintf(\"%s = %s(%s%s)\", add.backtick(x = get(outcome.name)), add.backtick(x = get(function.name)), add.backtick(x = get(variable.name)), dots.with.comma)]\n        }\n        \n        j.statement <-\n          sprintf(\".(%s)\", the.grid[, paste(Command, collapse = \", \")])\n      }\n      \n    }    \n  }\n  \n\n  \n  i.statement <- create.i.statement(dt.name = dt.name, the.filter = the.filter)  \n  \n  the.statement <- create.dt.statement(dt.name = dt.name, i.statement = i.statement, j.statement = j.statement, grouping.variables = grouping.variables, sortby.group = sortby.group)\n  \n  the.statement <- gsub(pattern = \"...\", replacement = other.params, x = the.statement, fixed = TRUE)\n  \n  res <- eval.dt.statement(the.statement = the.statement, return.as = return.as, envir = .GlobalEnv)\n  \n  revise.dt.status(dt.name = dt.name, envir = envir, is.format.dt = is.format.dt)\n  \n  return(res)\n}\n",
    "created" : 1607306998308.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1699299869",
    "id" : "574D018F",
    "lastKnownWriteTime" : 1606058632,
    "last_content_update" : 1606058632,
    "path" : "~/Desktop/DTwrappers Draft/DTwrappers/R/dt.calculate.R",
    "project_path" : "R/dt.calculate.R",
    "properties" : {
    },
    "relative_order" : 26,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}