{
    "collab_server" : "",
    "contents" : "#' dt.first.k.rows\n#'\n#' @description This function returns the first k rows from the given data.  It is built as a wrapper function of data.table's filter (the i step).  This calculation can be specified either overall or in groups.  A filter can also be applied so that only qualifying values would be considered.  A subset of the variables may also be selected.  Options also exist to return a data.table coding statement (result = \"code\") for educational purposes or both the result and the code together (result = \"all\").  For examples, please see the vignette.\n#'\n#'#' @param dt.name a character value specifying the name of a data.frame or data.table object to select data from.\n#' @param the.filter a character value, logical vector, or expression stating the logical operations used to filter the data.  See create.filter.expression for details.  The filtering step will be applied prior to generating the counts.  Defaults to NULL unless otherwise specified.\n#' @param grouping.variables  a character vector specifying the variables to group by in the calculation.  Only variables in the data will be used.  When NULL, no grouping will be performed.\n#' @param grouping.type  a character value specifying whether the grouping should be sorted (\"keyby\") or as is (\"by\").  Defaults to \"keyby\" unless \"by\" is specified.\n#' @param count.name  a character value specifying the name of the column of counts in the resulting table.  This value defaults to \"N\" unless otherwise specified.\n#' @param return.as a character value specifying what output should be returned.  return.as = \"result\" provides the resulting table.  return.as = \"code\" provides a data.table coding statement that can generate the resulting table.  return.as = \"all\" provides both the resulting table and the code.  If the coding statement was specified using calls to get() or eval(), then both an original.statement and the resulting code (a translated statement from the getDTeval package) will be provided.\n#' @param envir the environment in which the code would be evaluated; .GlobalEnv by default.\n#' @param ... additional arguments to be passed\n#' @note  Calls dt.choose.cols.R with first.k = k.\n#'\n#' @import formulaic\n#' @export\n#'\n#' @examples\n#'\n#' @source DTwrappers::dt.choose.cols\n#' @export\ndt.first.k.rows <-\n  function(dt.name,\n           k = NULL,\n           the.variables = \".\",\n           the.filter = NULL,\n           grouping.variables = NULL,\n           sortby.group = TRUE, \n           return.as = \"result\", \n           envir = .GlobalEnv,\n           ...) {\n    return(\n      dt.choose.cols(\n        dt.name = dt.name,\n        the.variables = the.variables,\n        the.filter = the.filter,\n        grouping.variables = grouping.variables,\n        sortby.group = sortby.group,\n        first.k = k, return.as = return.as, envir = envir,\n        ...\n      )\n    )\n  }\n\n\n\n#' dt.last.k.rows\n#'\n#' @description This function returns the last k rows from the given data.  It is built as a wrapper function of data.table's filter (the i step).  This calculation can be specified either overall or in groups.  A filter can also be applied so that only qualifying values would be considered.  A subset of the variables may also be selected.  Options also exist to return a data.table coding statement (result = \"code\") for educational purposes or both the result and the code together (result = \"all\").  For examples, please see the vignette.\n#'\n#' @param dt.name a character value specifying the name of a data.frame or data.table object to select data from.\n#' @param the.filter a character value, logical vector, or expression stating the logical operations used to filter the data.  See create.filter.expression for details.  The filtering step will be applied prior to generating the counts.  Defaults to NULL unless otherwise specified.\n#' @param grouping.variables  a character vector specifying the variables to group by in the calculation.  Only variables in the data will be used.  When NULL, no grouping will be performed.\n#' @param grouping.type  a character value specifying whether the grouping should be sorted (\"keyby\") or as is (\"by\").  Defaults to \"keyby\" unless \"by\" is specified.\n#' @param count.name  a character value specifying the name of the column of counts in the resulting table.  This value defaults to \"N\" unless otherwise specified.\n#' @param return.as a character value specifying what output should be returned.  return.as = \"result\" provides the resulting table.  return.as = \"code\" provides a data.table coding statement that can generate the resulting table.  return.as = \"all\" provides both the resulting table and the code.  If the coding statement was specified using calls to get() or eval(), then both an original.statement and the resulting code (a translated statement from the getDTeval package) will be provided.\n#' @param envir the environment in which the code would be evaluated; .GlobalEnv by default.\n#' @param  ... additional arguments to be passed\n#' @note  Calls dt.choose.cols.R with last.k = k.\n#' @import formulaic\n#' @export\n#' @examples\n#'\n#' id.name = \"User ID\"\n#' age.name = \"Age\"\n#' product.name = \"Product\"\n#' gender.name  = \"Gender\"\n#' region.name = \"Region\"\n#'\n#' dt.last.k.rows(dt.name = \"snack.dat\", \n#' k = 2, \n#' the.variables = c(id.name, age.name, product.name), \n#' grouping.variables = gender.name, \n#' grouping.type = \"by\")\n#'\n#' dt.last.k.rows(dt.name = \"snack.dat\", \n#' k = 1, \n#' the.variables = c(id.name, age.name, product.name), \n#' grouping.variables = c(gender.name, region.name), \n#' grouping.type = \"keyby\", return.as = \"all\")\n#'\n#' @source DTwrappers::dt.choose.cols\n#' @export\ndt.last.k.rows <-\n  function(dt.name,\n           k = NULL,\n           the.variables = \".\",\n           the.filter = NULL,\n           grouping.variables = NULL,\n           sortby.group = TRUE, \n           return.as = \"result\", \n           envir = .GlobalEnv,\n           ...) {\n    return(\n      dt.choose.cols(\n        dt.name = dt.name,\n        the.variables = the.variables,\n        the.filter = the.filter,\n        grouping.variables = grouping.variables,\n        sortby.group = sortby.group,\n        last.k = k, return.as = return.as, envir = envir,\n        ...)\n    )\n  }\n",
    "created" : 1607302543571.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3431171762",
    "id" : "A534BD6B",
    "lastKnownWriteTime" : 1605114488,
    "last_content_update" : 1605114488,
    "path" : "~/Desktop/DTwrappers Draft/DTwrappers/R/dt.first.k.rows_and_dt.last.k.rows.R",
    "project_path" : "R/dt.first.k.rows_and_dt.last.k.rows.R",
    "properties" : {
    },
    "relative_order" : 18,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}