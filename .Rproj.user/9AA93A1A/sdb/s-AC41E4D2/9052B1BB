{
    "collab_server" : "",
    "contents" : "#' dt.count.rows\n#'\n#' @description This function counts the number of qualifying rows in a data.table or data.frame object.  It is built as a wrapper function of data.table's filter (the i step).  These counts may be comprehensive for the entire table or conducted in groups.  The full data can also be filtered for qualifying cases prior to conducting the counts.  This function returns a data.table object that shows the counts in one column along with additional columns for any specified grouping variables.  Options also exist to return a data.table coding statement (result = \"code\") for educational purposes or both the result and the code together (result = \"all\").  For examples, please see the vignette.\n#'\n#' @param dt.name a character value specifying the name of a data.frame or data.table object to select data from.  A variable called dat should be referred to with dt.name = \"dat\" when using the function.\n#' @param the.filter  a character value, numeric vector, logical vector, or expression stating the logical operations used to filter the data.  The filtering step will be applied prior to generating the counts.  Defaults to NULL unless otherwise specified.  Character values such as 'Age < 50' or 'c(1:3, 7:10)' may be used.  Numeric vectors such as c(1:3, 7:10) that specify the row indices may be used.  Logical vectors will be converted to a numeric filter, e.g. c(TRUE, TRUE, FALSE) will become 1:2 to signify which rows should be selected.  Expressions may be used to specify a logical operation such as expression(Age < 50) as well.  Defaults to NULL to indicate that no filtering of the data should be applied.\n#' @param grouping.variables  A character or numeric vector specifying the variables to perform the calculations on. For character vectors, the values may be either column names of the data or calculations based upon them (see the vignette for examples).  For numeric vectors, only the values of unique(floor(grouping.variables)) that are in 1:ncol() of your data will be used.  Then these indices will be mapped to the corresponding column names from the data.  When NULL, no grouping will be performed.\n#' @param sort.by.group  a character value specifying whether the table of counts should be sorted by group (\"sorted\") or as is (any other selected value).  Defaults to \"sorted\".\n#' @param count.name  a character value specifying the name of the column of counts in the resulting table.  This value defaults to \"N\" unless otherwise specified.\n#' @param return.as a character value specifying what output should be returned.  return.as = \"result\" provides the table of counts.  return.as = \"code\" provides a data.table coding statement that can generate the table of counts.  return.as = \"all\" provides both the resulting table and the code.  If the coding statement was specified using calls to get() or eval(), then both an original.statement and the resulting code (a translated statement from the getDTeval package) will be provided.\n#' @param envir the environment in which the code would be evaluated; .GlobalEnv by default.\n#' @note the data.frame dat will be converted to a data.table object to facilitate efficient selection.\n#' @import formulaic\n#' @export\n#' @examples\n#'\n#' @source DTwrappers::create.dt.statement\n#' @source DTwrappers::eval.dt.statement\n#' @import data.table\n#' @export\ndt.count.rows <-\n  function(dt.name,\n           the.filter = NULL,\n           grouping.variables = NULL,\n           sortby.group = TRUE,\n           count.name = \"N\",\n           return.as = \"result\", \n           envir = .GlobalEnv){\n  require(data.table)\n  \n  is.format.dt <- check.dt.status(dt.name = dt.name, envir = envir)\n  \n  all.variable.names <- names(get(x = dt.name, envir = envir))\n  if(is.numeric(x = grouping.variables) == TRUE){\n    grouping.indices <- unique(floor(grouping.variables))\n    grouping.variables <- all.variable.names[grouping.indices]\n  }\n  \n  grouping.variables <- unique(grouping.variables)\n  \n  i.statement <- create.i.statement(dt.name = dt.name, the.filter = the.filter)  \n  \n  if(count.name == \"N\"){\n    j.statement <- \".N\"\n  }\n  if(count.name != \"N\"){\n    j.statement <- sprintf(\".(%s = .N)\", add.backtick(x = count.name))  \n  }\n  \n  the.statement <- create.dt.statement(dt.name = dt.name, i.statement = i.statement, j.statement = j.statement, grouping.variables = grouping.variables, sortby.group = sortby.group)\n  \n  res <- eval.dt.statement(the.statement = the.statement, return.as = return.as, envir = .GlobalEnv)\n  \n  revise.dt.status(dt.name = dt.name, envir = envir, is.format.dt = is.format.dt)\n\n  return(res)\n}\n\n#' dt.choose.rows\n#'\n#' @description This function filters the rows of a data.table or data.frame object.  It is built as a wrapper function of data.table's filtering method (the i step).  A series of logical tests on variables within the data may be specified.  Options also exist to return a data.table coding statement (result = \"code\") for educational purposes or both the result and the code together (result = \"all\").  For examples, please see the vignette.\n#'\n#' @param dt.name a character value specifying the name of a data.frame or data.table object to select data from.  A variable called dat should be referred to with dt.name = \"dat\" when using the function.\n#' @param the.filter  a character value, numeric vector, logical vector, or expression stating the logical operations used to filter the data.  The filtering step will be applied prior to generating the counts.  Defaults to NULL unless otherwise specified.  Character values such as 'Age < 50' or 'c(1:3, 7:10)' may be used.  Numeric vectors such as c(1:3, 7:10) that specify the row indices may be used.  Logical vectors will be converted to a numeric filter, e.g. c(TRUE, TRUE, FALSE) will become 1:2 to signify which rows should be selected.  Expressions may be used to specify a logical operation such as expression(Age < 50) as well.  Defaults to NULL to indicate that no filtering of the data should be applied.\n#' @param return.as a character value specifying what output should be returned.  return.as = \"result\" provides the table of counts.  return.as = \"code\" provides a data.table coding statement that can generate the table of counts.  return.as = \"all\" provides both the resulting table and the code.  If the coding statement was specified using calls to get() or eval(), then both an original.statement and the resulting code (a translated statement from the getDTeval package) will be provided.\n#' @param envir the environment in which the code would be evaluated; .GlobalEnv by default.\n#' @note the data.frame dat will be converted to a data.table object to facilitate efficient counting of the rows.\n#'\n#' @export\n#' @examples\n\n#' @source DTwrappers::create.dt.statement\n#' @source DTwrappers::eval.dt.statement\n#' @import data.table\n#' @export\ndt.choose.rows <- function(\n  dt.name, \n  the.filter = NULL, \n  return.as = \"result\", \n  envir = .GlobalEnv) {\n  \n  require(data.table)\n  \n  is.format.dt <- check.dt.status(dt.name = dt.name, envir = envir)\n  \n  i.statement <- create.i.statement(dt.name = dt.name, the.filter = the.filter)  \n  \n  the.statement <- create.dt.statement(dt.name = dt.name, i.statement = i.statement)\n  \n  res <- eval.dt.statement(the.statement = the.statement, return.as = return.as, envir = .GlobalEnv)\n  \n  revise.dt.status(dt.name = dt.name, envir = envir, is.format.dt = is.format.dt)\n  \n  return(res)\n}\n\n#' dt.choose.cols\n#'\n#' @description This function selects columns from a data.frame or data.table.  It is built as a wrapper function of data.table's selection step (using .SD in the j step while specifying the .SDcols argument).  Selections may also be supplied to limit the rows to consider, with options for the first or last k rows or a subset based upon a vector like c(3:5, 9:10).  Filtering of the rows (e.g. Age < 50) may also be applied using the.filter.  Grouped operations may be used to make these selections of columns and rows in each category.  Options also exist to return a data.table coding statement (result = \"code\") for educational purposes or both the result and the code together (result = \"all\").  For examples, please see the vignette.\n#'\n#'\n#' @param dt.name a character value specifying the name of a data.frame or data.table object to select data from.  A variable called dat should be referred to with dt.name = \"dat\" when using the function.\n#' @param the.variables A character or numeric vector specifying the variables that we want to select.  For character vectors, only values that exist in the names of the data will be used.  For numeric vectors, only the values of unique(floor(sorting.variables)) that are in 1:ncol() of your data will be used.  Then these indices will be used to select column names from the data.  Only values that exist in the names of the data will be used; other values in the.variables will be excluded from the calculation.  When the.variables includes \".\", then all of the variables will be selected.  Values of the.variables that also exist in grouping.variables will be excluded from the.variables (but grouped by these values).\n#' @param the.filter  a character value, numeric vector, logical vector, or expression stating the logical operations used to filter the data.  The filtering step will be applied prior to generating the counts.  Defaults to NULL unless otherwise specified.  Character values such as 'Age < 50' or 'c(1:3, 7:10)' may be used.  Numeric vectors such as c(1:3, 7:10) that specify the row indices may be used.  Logical vectors will be converted to a numeric filter, e.g. c(TRUE, TRUE, FALSE) will become 1:2 to signify which rows should be selected.  Expressions may be used to specify a logical operation such as expression(Age < 50) as well.  Defaults to NULL to indicate that no filtering of the data should be applied.\n#' @param grouping.variables  A character or numeric vector specifying the variables to perform the calculations on. For character vectors, the values may be either column names of the data or calculations based upon them (see the vignette for examples).  For numeric vectors, only the values of unique(floor(grouping.variables)) that are in 1:ncol() of your data will be used.  Then these indices will be mapped to the corresponding column names from the data.  When NULL, no grouping will be performed.\n#' @param sort.by.group  A character value specifying whether the grouping should be sorted (keyby) or as is (by).  Defaults to keyby unless \"by\" is specified.\n#' @param first.k An integer indicating how many rows to select starting from the first row.  Note that grouping statements will select up to this number of rows in each group.  Additionally, if first.k is larger than the number of records in a group, then the maximum number of records will be selected.  When non-integer or non-positive values of first.k are selected, the algorithm will select first.k = max(c(1, round(first.k))).  If first.k is not a numeric or integer value, then by default first.k is set to select all of the rows.  Specifying row.indices takes precedence to specifying the parameter first.k; if row.indices is not NULL, then row.indices will be used, and first.k will not. Meanwhile, first.k takes precedence to last.k when both are specified.  See below.\n#' @param last.k An integer indicating how many rows to select starting from the last row.  Note that grouping statements will select up to this number of rows in each group.  Additionally, if last.k is larger than the number of records in a group, then the maximum number of records will be selected.  When non-integer or non-positive values of last.k are selected, the algorithm will select last.k = max(c(1, round(last.k))).  If last.k is not a numeric or integer value, then by default last.k is set to select all of the rows.  Specifying row.indices takes precedence to specifying the parameter last.k (see below); if row.indices is not NULL, then it will be used, and last.k will not.  Meanwhile, first.k takes precedence to last.k when both are specified.\n#' @param row.indices An integer vector specifying the row indices to return.  When grouping.variables is specified, these indices will be applied to each group.  Note that specifications outside of the range from 1 to the number of rows will be limited to existing rows from the data and group.  Specifying row.indices takes precedence to specifying the parameters first.k and last.k.  If row.indices is not NULL, it will be used.\n#' @param return.as a character value specifying what output should be returned.  return.as = \"result\" provides the table of counts.  return.as = \"code\" provides a data.table coding statement that can generate the table of counts.  return.as = \"all\" provides a list containing both the resulting table and the code.\n#' @param envir the environment in which the code would be evaluated; .GlobalEnv by default.\n#'\n#' @import formulaic\n#' \n#' @export\n#'\n#' @import data.table\n#' @source DTwrappers::create.dt.statement\n#' @source DTwrappers::eval.dt.statement\n#' @export\ndt.choose.cols <-\n  function(dt.name,\n           the.variables = \".\",\n           the.filter = NULL,\n           grouping.variables = NULL,\n           sortby.group = TRUE,\n           first.k = NULL,\n           last.k = NULL,\n           row.indices = NULL,\n           return.as = \"result\", \n           envir = .GlobalEnv) {\n\n  require(data.table)\n  \n  is.format.dt <- check.dt.status(dt.name = dt.name, envir = envir)\n  .N <- NULL\n  \n  all.variable.names <- names(x = get(dt.name))\n  \n  if(is.numeric(x = grouping.variables) == TRUE){\n    grouping.indices <- unique(floor(grouping.variables))\n    grouping.variables <- all.variable.names[grouping.indices]\n  }\n  \n  grouping.variables <- unique(grouping.variables)\n\n  if (\".\" %in% the.variables) {\n    the.variables <- all.variable.names\n  }\n  \n  if(is.numeric(the.variables) == TRUE){\n    the.indices <- unique(floor(the.variables))\n    \n    the.variables <- all.variable.names[the.indices[the.indices %in% 1:ncol(x = get(x = dt.name, envir = envir))]]\n  }\n  \n  the.variables <-\n    unique(the.variables[the.variables %in% all.variable.names & !(the.variables %in% grouping.variables)])\n  \n  pasted.variables <- sprintf(\"c(%s)\", paste(sprintf(\"'%s'\", the.variables), collapse = \", \"))\n  \n  SD.statement <- sprintf(\", .SDcols = %s\", pasted.variables)\n  \n  if(length(the.variables) == length(all.variable.names) & mean(the.variables %in% all.variable.names) == 1){\n    SD.statement <- \"\"\n  }\n  \n  \n  specified.first.k <- !is.null(first.k)\n  specified.last.k <- !is.null(last.k)\n  specified.row.indices <- !is.null(row.indices)\n  \n  if(specified.row.indices == TRUE){\n    printed.row.indices <- reduce.vector.expression(x = row.indices)\n    j.statement <-\n      sprintf(\".SD[(%s)[(%s) %%in%% 1:min(.N, %s[, .N])]]%s\", printed.row.indices, printed.row.indices, dt.name, SD.statement)\n  }\n  if (specified.row.indices == FALSE) {\n    if (specified.first.k == TRUE & specified.last.k == FALSE) {\n      if (!is.numeric(first.k) & !is.integer(first.k)) {\n        first.k <- dat[, .N]\n      }\n      \n      first.k <- max(c(1, round(first.k)))\n      \n      j.statement <-\n        sprintf(\".SD[1:min(.N, %d)]%s\", first.k, SD.statement)\n    }\n    if (specified.first.k == FALSE & specified.last.k == TRUE) {\n      if (!is.numeric(last.k) & !is.integer(last.k)) {\n        last.k <- dat[, .N]\n      }\n      \n      last.k <- max(c(1, round(last.k)))\n      \n      if(last.k > 1){\n        value.to.subtract <- sprintf(\" - %d\", last.k - 1)\n      }\n      if(last.k == 1){\n        value.to.subtract <- \"\"\n      }\n      \n      j.statement <-\n        sprintf(\".SD[max(1, .N%s):.N]%s\", value.to.subtract, SD.statement)\n    }\n    if (specified.first.k == FALSE & specified.last.k == FALSE) {\n      \n      SD.printed <- \".SD\"\n      if(length(the.variables) == length(all.variable.names) & mean(the.variables %in% all.variable.names) == 1){\n        SD.printed <- \"\"\n      }\n      j.statement <- sprintf(\"%s%s\", SD.printed, SD.statement)\n    }\n  }\n  i.statement <- create.i.statement(dt.name = dt.name, the.filter = the.filter)  \n  \n  the.statement <- create.dt.statement(dt.name = dt.name, i.statement = i.statement, j.statement = j.statement, grouping.variables = grouping.variables, sortby.group = sortby.group)\n  \n  res <- eval.dt.statement(the.statement = the.statement, return.as = return.as, envir = .GlobalEnv)\n  \n  revise.dt.status(dt.name = dt.name, envir = envir, is.format.dt = is.format.dt)\n  \n  return(res)\n}\n",
    "created" : 1607302538646.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1920355992",
    "id" : "9052B1BB",
    "lastKnownWriteTime" : 1605195623,
    "last_content_update" : 1605195623,
    "path" : "~/Desktop/DTwrappers Draft/DTwrappers/R/dt.choose.rows, dt.choose.cols, and dt.count.rows.R",
    "project_path" : "R/dt.choose.rows, dt.choose.cols, and dt.count.rows.R",
    "properties" : {
    },
    "relative_order" : 16,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}