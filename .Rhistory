cranlogs::cran_downloads(packages='getDTeval')
cranlogs::cran_downloads(packages='getDTeval', from = '11-18-2020', to = '12-06-2020')
cranlogs::cran_downloads(packages='getDTeval', from = '2020-11-18', to = '2020-12-06')
dlstats::cran_stats(packages='getDTeval')
dlstats::cran_stats(packages='formulaic')
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::document()
devtools::check()
devtools::document()
devtools::check()
devtools::document()
devtools::check()
devtools::document()
devtools::check()
devtools::document()
devtools::check()
devtools::document()
devtools::document()
devtools::document()
devtools::check()
devtools::check()
devtools::document()
devtools::check()
devtools::document()
devtools::document()
devtools::document()
devtools::check()
devtools::check()
devtools::build()
devtools::build()
devtools::build()
devtools::revdep("getDTeval",dependencies = c("Depends", "Imports", "Suggests",
"LinkingTo"), recursive = FALSE, ignore = NULL,
bioconductor = FALSE)
devtools::revdep("DTwrappers",dependencies = c("Depends", "Imports", "Suggests",
"LinkingTo"), recursive = FALSE, ignore = NULL,
bioconductor = FALSE)
usethis::use_travis()
devtools::check_rhub()
tinytex::install_tinytex()
usethis::use_testthat()
dt.choose.rows(dt.name = "dat", the.filter = 1:3, return.as = 'all')
library(DTwrappers)
dt.choose.rows(dt.name = "dat", the.filter = 1:3, return.as = 'all')
n <- nrow(iris)
dt.name <- "dat"
dt.choose.rows(dt.name = "dat", the.filter = 1:3, return.as = 'all')
dat <- data.table::as.data.table(x = iris[sample(x = 1:n, size = n, replace = F),])
dt.choose.rows(dt.name = "dat", the.filter = 1:3, return.as = 'all')
context('DTwrappers')
library(data.table)
#1 choose rows check
chosefirstthree = dat[1:3,]
firstthree_dtwrappers=dt.choose.rows(dt.name = "dat", the.filter = 1:3)
test_that('select first 3 rows of dataset', {
expect_equal(firstthree_dtwrappers, chosefirstthree)
})
library(testthat)
library(DTwrappers)
test_check("DTwrappers")
context('DTwrappers')
library(data.table)
#1 choose rows check
chosefirstthree = dat[1:3,]
firstthree_dtwrappers=dt.choose.rows(dt.name = "dat", the.filter = 1:3)
test_that('select first 3 rows of dataset', {
expect_equal(firstthree_dtwrappers, chosefirstthree)
})
devtools::check()
devtools::check()
devtools::check()
devtools::check()
chosefirstthree = dat[1:3,]
firstthree_dtwrappers=dt.choose.rows(dt.name = 'dat', the.filter = 1:3)
test_that('select first 3 rows of dataset', {
expect_equal(firstthree_dtwrappers, chosefirstthree)
})
devtools::check()
devtools::check()
n <- nrow(iris)
dt.name <- "dat"
dat <- data.table::as.data.table(x = iris[sample(x = 1:n, size = n, replace = F),])
#1 choose rows check
chosefirstthree = dat[1:3,]
firstthree_dtwrappers=dt.choose.rows(dt.name = dat, the.filter = 1:3)
test_that('select first 3 rows of dataset', {
expect_equal(firstthree_dtwrappers, chosefirstthree)
})
n <- nrow(iris)
dt.name <- "dat"
dat <- data.table::as.data.table(x = iris[sample(x = 1:n, size = n, replace = F),])
#1 choose rows check
chosefirstthree = dat[1:3,]
firstthree_dtwrappers=dt.choose.rows(dt.name = "dat", the.filter = 1:3)
test_that('select first 3 rows of dataset', {
expect_equal(firstthree_dtwrappers, chosefirstthree)
})
n <- nrow(iris)
dat <- data.table::as.data.table(x = iris[sample(x = 1:n, size = n, replace = F),])
#1 choose rows check
chosefirstthree = dat[1:3,]
firstthree_dtwrappers=dt.choose.rows(dt.name = "dat", the.filter = 1:3)
test_that('select first 3 rows of dataset', {
expect_equal(firstthree_dtwrappers, chosefirstthree)
})
devtools::check()
devtools::check()
n <- nrow(iris)
dat <- data.table::as.data.table(x = iris[sample(x = 1:n, size = n, replace = F),])
#1 choose rows check
chosefirstthree = dat[1:3,]
firstthree_dtwrappers=dt.choose.rows('dat', the.filter = 1:3)
test_that('select first 3 rows of dataset', {
expect_equal(firstthree_dtwrappers, chosefirstthree)
})
devtools::check()
chosefirstthree = data.table::iris[1:3,]
chosefirstthree = iris[1:3,]
firstthree_dtwrappers=dt.choose.rows(iris, the.filter = 1:3)
firstthree_dtwrappers=dt.choose.rows(dt.name = 'iris', the.filter = 1:3)
test_that('select first 3 rows of dataset', {
expect_equal(firstthree_dtwrappers, chosefirstthree)
})
chosefirstthree = as.data.table(iris[1:3,])
firstthree_dtwrappers=dt.choose.rows(dt.name = 'iris', the.filter = 1:3)
test_that('select first 3 rows of dataset', {
expect_equal(firstthree_dtwrappers, chosefirstthree)
})
devtools::check()
